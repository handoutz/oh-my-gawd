var Journals = require('./models/journals.js'),
    Medications = require('./models/medications.js'),
    Allergies = require('./models/allergies.js'),
    uid = require('uid-safe'),
    bodyParser = require('body-parser'),
    _ = require('underscore'),
    Conditions = require('./models/conditions.js'),
    Notifies = require('./models/notify.js'),
    async = require('async'),
    crypto = require('crypto'),
    nodemailer = require('nodemailer'),
    mongoose = require('mongoose'),
    passport = require('passport'),
    User = require('./models/user.js'),
    Client = require('./models/oauth2/oauth2models').Client,
    medicationReminders = require('./models/medicationReminders.js'),
    epilepticEvents = require('./models/epilepticEvents.js');
var _log = require('log4js');
// app/routes.js
module.exports = function (app, passport) {
    // =====================================
    // HOME PAGE (with login links) ========
    // =====================================
    app.get('/', function (req, res) {
        if (req.user) {
            _log.info("user "+ req.user.local.email + " was logged in while /");
            res.redirect('/profile');
        } else {
            _log.info("user not logged in");
            res.render('pages/index.ejs'); // load the index.ejs file
        }
    });

    app.get('/404', function (req, res) {
        res.render('pages/404.ejs');
    });
    app.get('/about', function (req, res) {
        res.render('pages/about.ejs');
    });

    app.get('/contact', function (req, res) {
        res.render('pages/contact.ejs');
    });

    app.get('/privacy', function (req, res) {
        res.render('pages/privacy.ejs');
    });

    app.get('/termsofuse', function (req, res) {
        res.render('pages/termsofuse.ejs');
    });

    require('./routes/loginroutes')(app, passport);
    require('./routes/signuproutes')(app, passport);
    require('./routes/oauthlogin')(app, passport);
    require('./routes/oauth2')(app, passport);
    //require('./routes/oauthroute')(app, passport);
    // =====================================
    // LOGIN ===============================
    // =====================================
    // show the login form

    //
    // =====================================
    // SIGNUP ==============================
    // =====================================
    // show the signup form∆í

    // =====================================
    // FORGOT PASS==============================
    // =====================================
    // show the forgot page
    app.get('/forgotPass', function (req, res) {
        res.render('pages/forgotPass.ejs', {message: ''});
        // render the page and pass in any flash data if it exists
    });
    app.post('/setpass', passport.authenticate('local-login', {
        failureRedirect: '/settings', // redirect back to the signup page if there is an error
        failureFlash: true // allow flash messages
    }), function (req, res, next) {
        var newpass = req.body['new-pass'],
            passconf = req.body['pass-confirm'];
        if (newpass !== passconf) {
            console.log('you failed');
            res.redirect('/settings');
        } else {
            User.findOne({'local.email': req.body['email']}, function (err, user) {
                if (err || user === null) {
                    console.log(err);
                    res.redirect('/settings');
                } else {
                    //user.local.password = User.generateHash(newpass);
                    //user.save();
                    User.resetPassword(user, newpass);
                    res.redirect('/');
                }
            });
        }
    });
    function logToConsole() {
        console.log(arguments);
    }

    //forgot forrm


    // =====================================
    // PROFILE SECTION =====================
    // =====================================
    // we will want this protected so you have to be logged in to visit
    // we will use route middleware to verify this (the isLoggedIn function)
    app.get('/profile', isLoggedIn, function (req, res) {
        req.user.populateDatas(function (extras) {
            req.user = _.extend(req.user.toObject(), extras);
            res.render('pages/profile.ejs', {
                user: req.user,
                message: req.flash('messages')
            });
        });
    });

    //NOTIFY
    app.get('/notify', isLoggedIn, function (req, res) {
        Notifies.find({
            'user_id': req.user._id
        }, function (err, user_notifies) {
            if (err) {
                res.send(err);
            }

            req.user.notifies = user_notifies;
            res.render('pages/notify.ejs', {
                user: req.user,
                notifiers: user_notifies
            });
        });
    });

    //dash
    app.get('/dash', isLoggedIn, function (req, res) {
        Journals.find({
            'user_id': req.user._id
        }, function (err, user_journals) {
            if (err) {
                res.send(err);
            }
            epilepticEvents.find({'user_id': req.user._id}, function (errar, events) {
                req.user.journals = user_journals;
                req.user.events = events;
                res.render('pages/dash.ejs', {
                    user: req.user // get the user out of session and pass to template
                });
            });
        });
    });

    //dash
    app.get('/community', isLoggedIn, function (req, res) {
        Journals.find({
            'user_id': req.user._id
        }, function (err, user_journals) {
            if (err) {
                res.send(err);
            }
            epilepticEvents.find({'user_id': req.user._id}, function (errar, events) {
                req.user.journals = user_journals;
                req.user.events = events;
                res.render('pages/community.ejs', {
                    user: req.user // get the user out of session and pass to template
                });
            });
        });
    });
    app.get('/settings', isLoggedIn, function (req, res) {
        res.render('pages/settings.ejs', {
            user: req.user // get the user out of session and pass to template
        });
    });

    app.post('/settings/:token', function (req, res) {
        async.waterfall([
            function (done) {
                User.findOne({
                    resetPasswordToken: req.params.token,
                    resetPasswordExpires: {$gt: Date.now()}
                }, function (err, user) {
                    if (!user) {
                        req.flash('error', 'Password reset token is invalid or has expired.');
                        return res.redirect('back');
                    }

                    user.password = req.body.password;
                    user.resetPasswordToken = undefined;
                    user.resetPasswordExpires = undefined;

                    user.save(function (err) {
                        req.logIn(user, function (err) {
                            done(err, user);
                        });
                    });
                });
            },
            function (user, done) {
                var smtpTransport = nodemailer.createTransport('SMTP', {
                    service: 'SendGrid',
                    auth: {
                        user: 'Neutun_Eric',
                        pass: 'deletebutton1'
                    }
                });
                var mailOptions = {
                    to: user.email,
                    from: 'passwordreset@neutun.com',
                    subject: 'Your password has been changed',
                    text: 'Hello,\n\n' +
                    'This is a confirmation that the password for your account ' + user.email + ' has just been changed.\n'
                };
                smtpTransport.sendMail(mailOptions, function (err) {
                    req.flash('success', 'Success! Your password has been changed.');
                    done(err);
                });
            }
        ], function (err) {
            res.redirect('/');
        });
    });

    // Pebble configuration window
    app.get('/settings/pebblekit', function (req, res) {
        // If a user is already logged in and has a pebble connected, config!
        if (req.user) {
            // Otherwise you get the settings page
            res.render('pages/settings/pebblekit/config.ejs', {
                user: req.user
            });
        } else {
            // Otherwise hunt the user down in the database. maybe.
            User.find({
                'pebble.watch_token': req.query.watch_token,
                'pebble.account_token': req.query.account_token
            }, function (err, user) {
                if (!err && user.length) {
                    // Get the settings page!
                    res.render('pages/settings/pebblekit/config.ejs', {
                        user: user
                    });
                } else {
                    // Otherwise render login page when the user hasn't connected their pebble yet
                    res.redirect('/settings/pebblekit/connect?watch_token=' + req.query.watch_token + '&account_token=' + req.query.account_token);
                }
            });
        }
    });

    app.get('/settings/pebblekit/connect', function (req, res) {
        res.render('pages/settings/pebblekit/login.ejs', {
            watchToken: req.query.watch_token,
            pebbleAccountToken: req.query.account_token
        });
    })

    app.post('/settings/pebblekit/connect', passport.authenticate('local-login', {
        failureRedirect: '/settings/pebblekit/connect'
    }), function (req, res) {


        // Save the user's Pebble information
        req.user.pebble.watch_token = req.body.watchToken;
        req.user.pebble.account_token = req.body.accountToken;
        //cookie,ajax,node.js
        //res.header('Access-Control-Allow-Credentials', 'true');

        req.user.save(function (err, user) {
            if (err) {
                throw err
            }

            req.user = user;

            // Redirect the user to the settings page
            res.redirect('/settings/pebblekit');
        });
    });

    // =====================================
    // LOGOUT ==============================
    // =====================================
    app.get('/logout', function (req, res) {
        req.logout();
        res.redirect('/');
    });

    // Endpoints
    app.use('/api', passport.authenticate(['pebble-request', 'session', 'custom-login']));
    //app.use('/api', passport.authenticate(['pebble-request', 'session', 'custom-login']));

    app.use('/api', require('./endpoints/journals'));
    app.use('/api', require('./endpoints/medications'));
    app.use('/api', require('./endpoints/conditions'));
    app.use('/api', require('./endpoints/allergies'));
    app.use('/api', require('./endpoints/notify'));
    app.use('/api', require('./endpoints/epilepticEvents'));
    app.use('/api', require('./endpoints/medicationReminders'));
    app.use('/api', require('./endpoints/users'));

    app.use('/api2', passport.authenticate(['pebble-request', 'session', 'custom-login']));
    app.use('/api2', require('./api/index')());

    app.use('/pebbleapi', require('./pebbleapi/api.js'));
};

// route middleware to make sure a user is logged in
function isLoggedIn(req, res, next) {
    if (req.isAuthenticated()) {
        return next();
    }
    req.flash('loginMessage', 'Must be logged in to do that action');
    res.redirect('/login');
}
